<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
  "/sw/share/xml/dtd/docbookx/4.5.0/docbookx.dtd">

<refentry id="packnam">

<refentryinfo>
<author>
<firstname>Kent</firstname>
<surname>Hansen</surname>
</author>
</refentryinfo>

<refmeta>
<refentrytitle>packnam</refentrytitle>
<manvolnum>1</manvolnum>
</refmeta>

<refnamediv>
<refname>packnam</refname>
<refpurpose>encodes a raw NES nametable</refpurpose>
</refnamediv>

<refsynopsisdiv>
<cmdsynopsis>
<command>packnam</command>
<arg choice="opt" rep="repeat">
  <option>option</option>
</arg>
<arg choice="req">file</arg>
</cmdsynopsis>
</refsynopsisdiv>

<refsect1><title>Description</title>
<para>
<command>packnam</command> reads a raw NES nametable (merely an array
of tile indexes -- bytes) and encodes it in a simple, space-efficient
format that can be readily decoded by 6502 code (i.e. so the graphic
that the nametable represents can be displayed on the NES).
</para>
<para>
As a basic illustration of what packnam does, assume that the input is
a nametable containing the following tile indexes (byte values):
</para>
<para>
0 0 0 1 1 2 3 4 1 1 1 1 1 3 3 0 0 0 0 1 0 1 0 4
</para>
<para>
The nametable is 24 bytes in size. Assume it represents a graphic
consisting of 6x4 tiles (6*4=24); packnam should thus be invoked with
the option <literal>--width=6</literal>. packnam will produce an
encoded nametable that represents the graphic as a series of rows:
</para>
<para>
row 0: 0 0 0 1 1 2
</para>
<para>
row 1: 3 4 1 1 1 1
</para>
<para>
row 2: 1 3 3 0 0 0
</para>
<para>
row 3: 0 1 0 1 0 4
</para>
</refsect1>

<refsect1><title>Options</title>
<variablelist>

<varlistentry>
<term>
<option>--width</option>=<parameter>num</parameter>
</term>
<listitem>
<para>
Use <parameter>num</parameter> as nametable width (tiles per row). If
this option is not specified, the width is 32 (i.e. the full width of
a NES hardware nametable).
</para>
</listitem>
</varlistentry>

<varlistentry>
<term>
<option>--vram-address</option>=<parameter>num</parameter>
</term>
<listitem>
<para>
Use <parameter>num</parameter> as VRAM start address (i.e. where the
first row will be decoded to). This is used to control where in the
NES hardware nametable the tile indexes should be written to; for
example, to center the graphic or right-align it. If this option is
not specified, the VRAM start address will be 0x2000 (beginning of NES
hardware nametable #0).
</para>
</listitem>
</varlistentry>

<varlistentry>
<term>
<option>--output</option>=<parameter>file</parameter>
</term>
<listitem>
<para>
Store encoded nametable in <parameter>file</parameter>. If this option
is not specified, the data will be written
to <literal>packnam.dat</literal>.
</para>
</listitem>
</varlistentry>

<varlistentry>
<term>
<option>--zero-terminate</option>
</term>
<listitem>
<para>
Zero-terminate the output (i.e. add a trailing 0-byte).
</para>
</listitem>
</varlistentry>

<varlistentry>
<term>
<option>--verbose</option>
</term>
<listitem>
<para>
Print progress information to standard output.
</para>
</listitem>
</varlistentry>

<varlistentry>
<term>
<option>--help</option>
</term>
<listitem>
<para>
Give a help list.
</para>
</listitem>
</varlistentry>

<varlistentry>
<term>
<option>--usage</option>
</term>
<listitem>
<para>
Give a short usage message.
</para>
</listitem>
</varlistentry>

<varlistentry>
<term>
<option>--version</option>
</term>
<listitem>
<para>
Print program version.
</para>
</listitem>
</varlistentry>

</variablelist>
</refsect1>

<refsect1>
<title>Files</title>
<refsect2>
<title>Input</title>
<para>
The input nametable is typically one produced by
the <command>packchr</command> tool, or by your favorite hex editor
(extra points!). It's just a series of tile indexes, each index being one
byte (references a tile in the range 0..255).
</para>
</refsect2>
<refsect2>
<title>Output</title>
<para>
The output is a sequence of strings of the following format:
</para>
<para>
byte 0: high VRAM address
</para>
<para>
byte 1: low VRAM address
</para>
<para>
byte 2: bits 0-5: length of data string (repeat count if RLE);
        bit 6:    is data RLE? (1 = yes);
        bit 7:    VRAM address increment (0 = 1, 1 = 32)
</para>
<para>
byte 3-..: data. Only 1 byte if string is RLE
</para>
<para>
6502 code for decoding data of this format can be found
elsewhere, e.g. in the NeoToxin sources (ppuwrite.asm).
In your 6502 sources, you can then do something like:
</para>
<para>
<programlisting>
  my_nametable_data:
  .incbin "mynametable.dat" ; mynametable.dat produced by packnam
  .db 0 ; data terminator

  ...

  lda #&lt;my_nametable_data
  ldy #&gt;my_nametable_data
  jsr write_ppu_data_at     ; call decoder function
</programlisting>
</para>
<para>
packnam does not deal with CHR data, palette data or
attribute data; you are responsible for setting up those
things when displaying the image on the NES.
(A simple way of setting up the palette and attribute
table is by "tacking on" their data to packnam's output;
use the string format described above.)
</para>
</refsect2>
</refsect1>

<refsect1>
<title>Examples</title>
<para>
To pack <literal>mynametab.nam</literal>, using 6 tiles per row and
putting the graphic halfway down the screen:
</para>
<para>
<userinput>
packnam --width=6 --vram-address=0x21B0 mynametab.nam
</userinput>
</para>
</refsect1>

<refsect1>
<title>See Also</title>
<para>
packchr(1)
</para>
</refsect1>

</refentry>
